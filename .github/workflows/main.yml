name: Deploy Locally with Self-Hosted Runner

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_PROJECT_NAME: 'ecomapp'
  APP_CONTAINER_NAME: 'product_app'
  DB_CONTAINER_NAME: 'mysql-ecommerce-prod'
  DB_NAME: 'ecommerce_lp2_prod'
  DB_USER: 'root'
  DB_PASSWORD: 'admin123'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: 'http://localhost:9000'

jobs:
  build-and-deploy:
    name: Analyze with SonarQube and Deploy to Docker
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven (skip tests)
        run: mvn -B clean package -DskipTests

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        run: |
          echo "üîç Ejecutando an√°lisis con SonarQube..."
          mvn sonar:sonar \
            -Dsonar.projectKey=ecomapp \
            -Dsonar.projectName=EcomApp \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: Deploy with Docker Compose
        run: |
          echo "‚úÖ Iniciando despliegue en el runner local..."
          
          cd docker

          echo "üßπ Limpiando despliegue anterior (si existe)..."
          docker compose -p ${{ env.DOCKER_PROJECT_NAME }} down -v --remove-orphans || echo "‚ö†Ô∏è No se encontr√≥ un despliegue anterior para limpiar."

          echo "üèóÔ∏è Construyendo y levantando los servicios..."
          docker compose -p ${{ env.DOCKER_PROJECT_NAME }} up -d --build

          echo "‚è≥ Esperando 30 segundos para que la DB se estabilice..."
          sleep 30
          
          echo "üíæ Inicializando base de datos desde init.sql..."
          docker exec -i ${{ env.DB_CONTAINER_NAME }} mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} ${{ env.DB_NAME }} < ../sql/init.sql

          echo "üîç Verificando estado de los contenedores..."
          docker compose -p ${{ env.DOCKER_PROJECT_NAME }} ps
          
          echo "üóíÔ∏è Mostrando los √∫ltimos logs de la aplicaci√≥n:"
          docker logs --tail 100 ${{ env.APP_CONTAINER_NAME }}
          
          echo "üéâ ‚úì Despliegue local completado exitosamente."
